/*
 * main.c
 *
 *  Created on: Nov 24, 2024
 *      Author: lpcarm
 */

#include <stdint.h>
#include <xparameters.h>
#include "xtmrctr.h"
#include "xparameters.h"
#include "xintc.h"
#include "xil_exception.h"

#define PORTA (*(uint32_t *)0x81400000)
#define DDRA (*(uint32_t *)0x81400004)

#define LED1(x) (x==1? (PORTA|=1<<0):(PORTA&=~(1<<0)))

#define TCSR (*(uint32_t *)0x83C00000)
#define TLR (*(uint32_t *)0x83C00004)
#define TCR (*(uint32_t *)0x83C00008)

#define XTC_CSR_CASC_MASK		0x00000800 /**< Cascade Mode */


/*typedef struct
{
	union
	{
		struct
		{
			uint32_t captureEn:1;//0
			uint32_t downCount:1;//1
			uint32_t extOutput:1;//2
			uint32_t extInput:1;//3
			uint32_t arr:1;//4
			uint32_t load:1;//5
			uint32_t intEn:1;//6
			uint32_t onlySpecificTimer:1;//7
			uint32_t intFlag:1;//8
			uint32_t pwmEn:1;//9
			uint32_t timEn:1;//10
			uint32_t cascadeMode:1;//11
		};
		uint32_t ALL;
	};
}TIM_CTRL_STAT_t;
#define TCSR_T ((TIM_CTRL_STAT_t *)0x83C00000)*/

typedef struct
{
	union
	{
		struct
		{
			uint32_t RSV:20;
			uint32_t cascadeMode:1;//11
			uint32_t timEn:1;//10
			uint32_t pwmEn:1;//9
			uint32_t intFlag:1;//8
			uint32_t onlySpecificTimer:1;//7
			uint32_t intEn:1;//6
			uint32_t load:1;//5
			uint32_t arr:1;//4
			uint32_t extInput:1;//3
			uint32_t extOutput:1;//2
			uint32_t downCount:1;//1
			uint32_t captureEn:1;//0
		};
		uint32_t ALL;
	};
}TIM_CTRL_STAT_t;
#define TCSR_T ((TIM_CTRL_STAT_t *)0x83C00000)

void delay(uint32_t x);
void set_7seg_data(uint8_t data);
void set_7seg_select(uint8_t select);
void timer_InterruptHandler(void);

const uint8_t ss_code[]=
{
		0xFC,0x60,0xDA,0xF2,0x66,0xB6,0xBE,0xE0,
		0xFE,0xF6,0xEE,0x3E,0x9C,0x7A,0x9E,0x8E
};
uint32_t cnt;

XTmrCtr TimerCounter;
XIntc InterruptController;
int Status;

int main()
{
	DDRA=0x0000F0;
	Status = XIntc_Initialize(&InterruptController, XPAR_INTC_0_DEVICE_ID);
	// Connect the interrupt handler to the ISR
	Status = XIntc_Connect(&InterruptController, XPAR_INTC_0_TMRCTR_0_VEC_ID,
	(XInterruptHandler)timer_InterruptHandler, 0);
	// Start the interrupt controller
	Status = XIntc_Start(&InterruptController, XIN_REAL_MODE);
	// Enable interrupts in the MicroBlaze processor
	XIntc_Enable(&InterruptController, XPAR_INTC_0_TMRCTR_0_VEC_ID);
	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
	(Xil_ExceptionHandler)XIntc_InterruptHandler,
	&InterruptController);
	Xil_ExceptionEnable();

	TLR=0xF000000;

	TCSR_T->downCount=1;
	//TCSR_T->load=1;
	TCSR_T->arr=1;
	TCSR_T->timEn=1;
	TCSR_T->intEn=1;

	TLR=0xF000;
	TCSR_T->load=1;
	TCSR_T->load=0;
	while(1)
	{
		cnt++;
		if(cnt>999999)
			cnt=0;
		delay(20);
	}
	return 0;
}

void timer_InterruptHandler(void)
{
	static uint8_t state;
	static uint32_t data;
	switch(state)
	{
	case 0:
		data=TCR>>12;
		set_7seg_select(0x1F);//yekan
		set_7seg_data(~ss_code[data%10]);
		data=data/10;
		state=1;
		break;
	case 1:
		set_7seg_select(0x2F);//dahgan
		set_7seg_data(~ss_code[data%10]);
		data=data/10;
		state=2;
		break;
	case 2:
		set_7seg_select(0x37);//sadgan
		set_7seg_data(~ss_code[data%10]);
		data=data/10;
		state=3;
		break;
	case 3:
		set_7seg_select(0x3B);//hezargan
		set_7seg_data(~ss_code[data%10]);
		data=data/10;
		state=4;
		break;
	case 4:
		set_7seg_select(0x3D);//dah hezargan
		set_7seg_data(~ss_code[data%10]);
		data=data/10;
		state=5;
		break;
	case 5:
		set_7seg_select(0x3E);//sad hezargan
		set_7seg_data(~ss_code[data%10]);
		data=data/10;
		state=0;
		break;
	}
	TLR=0xF000;
	TCSR_T->load=1;
	TCSR_T->load=0;
}

void set_7seg_data(uint8_t data)
{
	PORTA&=0x3FFF;
	PORTA|=data<<14;
}

void set_7seg_select(uint8_t select)
{
	PORTA&=0x3FC0FF;
	PORTA|=select<<8;
}

void delay(uint32_t x)
{
	uint32_t i,j;
	for(j=0;j<x;j++)
	{
		for(i=0;i<1000;i++);
	}
}



