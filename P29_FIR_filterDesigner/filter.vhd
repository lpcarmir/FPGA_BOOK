-- -------------------------------------------------------------
--
-- Module: filter
-- Generated by MATLAB(R) 9.1 and the Filter Design HDL Coder 3.1.
-- Generated on: 2024-11-29 22:36:34
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- TargetDirectory: E:\prg\desktop\filterDesigner
-- SerialPartition: 28
-- TestBenchStimulus: impulse step ramp chirp noise 

-- -------------------------------------------------------------
-- HDL Implementation    : Fully Serial
-- Folding Factor        : 28
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Filter (real)
-- -------------------------------
-- Filter Structure  : Direct-Form FIR
-- Filter Length     : 28
-- Stable            : Yes
-- Linear Phase      : Yes (Type 2)
-- Arithmetic        : fixed
-- Numerator         : s16,17 -> [-2.500000e-01 2.500000e-01)
-- Input             : s16,15 -> [-1 1)
-- Filter Internals  : Full Precision
--   Output          : s34,32 -> [-2 2)  (auto determined)
--   Product         : s31,32 -> [-2.500000e-01 2.500000e-01)  (auto determined)
--   Accumulator     : s34,32 -> [-2 2)  (auto determined)
--   Round Mode      : No rounding
--   Overflow Mode   : No overflow
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY filter IS
   PORT( clk        :   IN    std_logic; 
         clk_enable :   IN    std_logic; 
         reset      :   IN    std_logic; 
         filter_in  :   IN    std_logic_vector(15 DOWNTO 0);
         filter_out :   OUT   std_logic_vector(33 DOWNTO 0)
         );
END filter;

ARCHITECTURE rtl OF filter IS
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(15 DOWNTO 0); -- sfix16_En15
  CONSTANT coeff1:signed(15 DOWNTO 0):= to_signed(332, 16);
  CONSTANT coeff2:signed(15 DOWNTO 0):= to_signed(636, 16);
  CONSTANT coeff3:signed(15 DOWNTO 0):= to_signed(807, 16);
  CONSTANT coeff4:signed(15 DOWNTO 0):= to_signed(452, 16);
  CONSTANT coeff5:signed(15 DOWNTO 0):= to_signed(-699, 16);
  CONSTANT coeff6:signed(15 DOWNTO 0):= to_signed(-2556, 16);
  CONSTANT coeff7:signed(15 DOWNTO 0):= to_signed(-4481, 16);
  CONSTANT coeff8:signed(15 DOWNTO 0):= to_signed(-5360, 16);
  CONSTANT coeff9:signed(15 DOWNTO 0):= to_signed(-3988, 16);
  CONSTANT coeff10:signed(15 DOWNTO 0):= to_signed(363, 16);
  CONSTANT coeff11:signed(15 DOWNTO 0):= to_signed(7431, 16);
  CONSTANT coeff12:signed(15 DOWNTO 0):= to_signed(15819, 16);
  CONSTANT coeff13:signed(15 DOWNTO 0):= to_signed(23346, 16);
  CONSTANT coeff14:signed(15 DOWNTO 0):= to_signed(27801, 16);
  CONSTANT coeff15:signed(15 DOWNTO 0):= to_signed(27801, 16);
  CONSTANT coeff16:signed(15 DOWNTO 0):= to_signed(23346, 16);
  CONSTANT coeff17:signed(15 DOWNTO 0):= to_signed(15819, 16);
  CONSTANT coeff18:signed(15 DOWNTO 0):= to_signed(7431, 16);
  CONSTANT coeff19:signed(15 DOWNTO 0):= to_signed(363, 16);
  CONSTANT coeff20:signed(15 DOWNTO 0):= to_signed(-3988, 16);
  CONSTANT coeff21:signed(15 DOWNTO 0):= to_signed(-5360, 16);
  CONSTANT coeff22:signed(15 DOWNTO 0):= to_signed(-4481, 16);
  CONSTANT coeff23:signed(15 DOWNTO 0):= to_signed(-2556, 16);
  CONSTANT coeff24:signed(15 DOWNTO 0):= to_signed(-699, 16);
  CONSTANT coeff25:signed(15 DOWNTO 0):= to_signed(452, 16);
  CONSTANT coeff26:signed(15 DOWNTO 0):= to_signed(807, 16);
  CONSTANT coeff27:signed(15 DOWNTO 0):= to_signed(636, 16);
  CONSTANT coeff28:signed(15 DOWNTO 0):= to_signed(332, 16);

  -- Signals
  SIGNAL cur_count     : unsigned(4 DOWNTO 0);
  SIGNAL phase_27      : std_logic; -- boolean
  SIGNAL phase_0       : std_logic; -- boolean
  SIGNAL delay_pipeline: delay_pipeline_type(0 TO 27);
  SIGNAL inputmux_1    : signed(15 DOWNTO 0);
  SIGNAL acc_final     : signed(33 DOWNTO 0);
  SIGNAL acc_out_1     : signed(33 DOWNTO 0);
  SIGNAL product_1     : signed(30 DOWNTO 0);
  SIGNAL product_1_mux : signed(15 DOWNTO 0);
  SIGNAL mul_temp      : signed(31 DOWNTO 0);
  SIGNAL prod_typeconvert_1: signed(33 DOWNTO 0);
  SIGNAL acc_sum_1     : signed(33 DOWNTO 0);
  SIGNAL acc_in_1      : signed(33 DOWNTO 0);
  SIGNAL add_temp      : signed(34 DOWNTO 0);
  SIGNAL output_typeconvert: signed(33 DOWNTO 0);
  SIGNAL output_register   : signed(33 DOWNTO 0);

BEGIN

  -- Block Statements
  Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cur_count <= to_unsigned(27, 5);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF cur_count = to_unsigned(27, 5) THEN
          cur_count <= to_unsigned(0, 5);
        ELSE
          cur_count <= cur_count + 1;
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter_process;

  phase_27 <= '1' WHEN cur_count = to_unsigned(27, 5) AND clk_enable = '1' ELSE '0';

  phase_0 <= '1' WHEN cur_count = to_unsigned(0, 5) AND clk_enable = '1' ELSE '0';

  Delay_Pipeline_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_pipeline(0 TO 27) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_27 = '1' THEN
        delay_pipeline(0) <= signed(filter_in);
        delay_pipeline(1 TO 27) <= delay_pipeline(0 TO 26);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;

  inputmux_1 <= delay_pipeline(0) WHEN ( cur_count = to_unsigned(0, 5) ) ELSE
    delay_pipeline(1) WHEN (cur_count = to_unsigned(1, 5))ELSE
    delay_pipeline(2) WHEN (cur_count = to_unsigned(2, 5))ELSE
    delay_pipeline(3) WHEN (cur_count = to_unsigned(3, 5))ELSE
    delay_pipeline(4) WHEN (cur_count = to_unsigned(4, 5))ELSE
    delay_pipeline(5) WHEN (cur_count = to_unsigned(5, 5))ELSE
    delay_pipeline(6) WHEN (cur_count = to_unsigned(6, 5))ELSE
    delay_pipeline(7) WHEN (cur_count = to_unsigned(7, 5))ELSE
    delay_pipeline(8) WHEN (cur_count = to_unsigned(8, 5))ELSE
    delay_pipeline(9) WHEN (cur_count = to_unsigned(9, 5))ELSE
    delay_pipeline(10) WHEN (cur_count = to_unsigned(10, 5))ELSE
    delay_pipeline(11) WHEN (cur_count = to_unsigned(11, 5))ELSE
    delay_pipeline(12) WHEN (cur_count = to_unsigned(12, 5))ELSE
    delay_pipeline(13) WHEN (cur_count = to_unsigned(13, 5))ELSE
    delay_pipeline(14) WHEN (cur_count = to_unsigned(14, 5))ELSE
    delay_pipeline(15) WHEN (cur_count = to_unsigned(15, 5))ELSE
    delay_pipeline(16) WHEN (cur_count = to_unsigned(16, 5))ELSE
    delay_pipeline(17) WHEN (cur_count = to_unsigned(17, 5))ELSE
    delay_pipeline(18) WHEN (cur_count = to_unsigned(18, 5))ELSE
    delay_pipeline(19) WHEN (cur_count = to_unsigned(19, 5))ELSE
    delay_pipeline(20) WHEN (cur_count = to_unsigned(20, 5))ELSE
    delay_pipeline(21) WHEN (cur_count = to_unsigned(21, 5))ELSE
    delay_pipeline(22) WHEN (cur_count = to_unsigned(22, 5))ELSE
    delay_pipeline(23) WHEN (cur_count = to_unsigned(23, 5))ELSE
    delay_pipeline(24) WHEN (cur_count = to_unsigned(24, 5))ELSE
    delay_pipeline(25) WHEN (cur_count = to_unsigned(25, 5))ELSE
    delay_pipeline(26) WHEN (cur_count = to_unsigned(26, 5))ELSE
    delay_pipeline(27);

  --   ------------------ Serial partition # 1 ------------------

  product_1_mux <= coeff1 WHEN ( cur_count = to_unsigned(0, 5) ) ELSE
    coeff2 WHEN (cur_count = to_unsigned(1, 5))ELSE
    coeff3 WHEN (cur_count = to_unsigned(2, 5))ELSE
    coeff4 WHEN (cur_count = to_unsigned(3, 5))ELSE
    coeff5 WHEN (cur_count = to_unsigned(4, 5))ELSE
    coeff6 WHEN (cur_count = to_unsigned(5, 5))ELSE
    coeff7 WHEN (cur_count = to_unsigned(6, 5))ELSE
    coeff8 WHEN (cur_count = to_unsigned(7, 5))ELSE
    coeff9 WHEN (cur_count = to_unsigned(8, 5))ELSE
    coeff10 WHEN (cur_count = to_unsigned(9, 5))ELSE
    coeff11 WHEN (cur_count = to_unsigned(10, 5))ELSE
    coeff12 WHEN (cur_count = to_unsigned(11, 5))ELSE
    coeff13 WHEN (cur_count = to_unsigned(12, 5))ELSE
    coeff14 WHEN (cur_count = to_unsigned(13, 5))ELSE
    coeff15 WHEN (cur_count = to_unsigned(14, 5))ELSE
    coeff16 WHEN (cur_count = to_unsigned(15, 5))ELSE
    coeff17 WHEN (cur_count = to_unsigned(16, 5))ELSE
    coeff18 WHEN (cur_count = to_unsigned(17, 5))ELSE
    coeff19 WHEN (cur_count = to_unsigned(18, 5))ELSE
    coeff20 WHEN (cur_count = to_unsigned(19, 5))ELSE
    coeff21 WHEN (cur_count = to_unsigned(20, 5))ELSE
    coeff22 WHEN (cur_count = to_unsigned(21, 5))ELSE
    coeff23 WHEN (cur_count = to_unsigned(22, 5))ELSE
    coeff24 WHEN (cur_count = to_unsigned(23, 5))ELSE
    coeff25 WHEN (cur_count = to_unsigned(24, 5))ELSE
    coeff26 WHEN (cur_count = to_unsigned(25, 5))ELSE
    coeff27 WHEN (cur_count = to_unsigned(26, 5))ELSE
    coeff28;
  mul_temp <= inputmux_1 * product_1_mux;
  product_1 <= mul_temp(30 DOWNTO 0);

  prod_typeconvert_1 <= resize(product_1, 34);

  add_temp <= resize(prod_typeconvert_1, 35) + resize(acc_out_1, 35);
  acc_sum_1 <= add_temp(33 DOWNTO 0);

  acc_in_1 <= prod_typeconvert_1 WHEN ( phase_0 = '1' ) ELSE
                   acc_sum_1;

  Acc_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      acc_out_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        acc_out_1 <= acc_in_1;
      END IF;
    END IF; 
  END PROCESS Acc_reg_1_process;

  Finalsum_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      acc_final <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        acc_final <= acc_out_1;
      END IF;
    END IF; 
  END PROCESS Finalsum_reg_process;

  output_typeconvert <= acc_final;

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_27 = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  filter_out <= std_logic_vector(output_register);
END rtl;
